/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:19:55 GMT 2018
 */

package role;

import org.junit.Test;
import static org.junit.Assert.*;
import heuristics.AnalysedFile;
import heuristics.other.FilePathHeuristics;
import heuristics.other.FilenameHeuristics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.repodriller.domain.Modification;
import org.repodriller.domain.ModificationType;
import postprocessors.WeakRolesProcessor;
import role.RoleMappingStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoleMappingStrategy_ESTest extends RoleMappingStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RoleMappingStrategy roleMappingStrategy0 = new RoleMappingStrategy();
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      FilenameHeuristics filenameHeuristics1 = filenameHeuristics0.mapExtensions(stringArray0);
      RoleMappingStrategy roleMappingStrategy1 = roleMappingStrategy0.addHeuristic("", filenameHeuristics1);
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("", "", modificationType0, "", "");
      AnalysedFile analysedFile0 = roleMappingStrategy1.applyHeuristics(modification0);
      assertNotNull(analysedFile0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RoleMappingStrategy roleMappingStrategy0 = new RoleMappingStrategy();
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      RoleMappingStrategy roleMappingStrategy1 = roleMappingStrategy0.addHeuristic("", filenameHeuristics0);
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("", "", modificationType0, "", "");
      AnalysedFile analysedFile0 = roleMappingStrategy1.applyHeuristics(modification0);
      assertNotNull(analysedFile0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RoleMappingStrategy roleMappingStrategy0 = new RoleMappingStrategy();
      FilePathHeuristics filePathHeuristics0 = new FilePathHeuristics();
      roleMappingStrategy0.addHeuristic("{", filePathHeuristics0);
      RoleMappingStrategy roleMappingStrategy1 = roleMappingStrategy0.addHeuristic("{", filePathHeuristics0);
      assertSame(roleMappingStrategy0, roleMappingStrategy1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RoleMappingStrategy roleMappingStrategy0 = new RoleMappingStrategy();
      WeakRolesProcessor weakRolesProcessor0 = new WeakRolesProcessor();
      RoleMappingStrategy roleMappingStrategy1 = roleMappingStrategy0.addPostProcessor(weakRolesProcessor0);
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("", "", modificationType0, "", "");
      AnalysedFile analysedFile0 = roleMappingStrategy1.applyHeuristics(modification0);
      assertNotNull(analysedFile0);
  }
}
