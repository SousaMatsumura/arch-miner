/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:12:39 GMT 2018
 */

package heuristics.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heuristics.AnalysedFile;
import heuristics.ConfigurableHeuristics;
import heuristics.java.ClassStructureHeuristics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.repodriller.domain.Modification;
import org.repodriller.domain.ModificationType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassStructureHeuristics_ESTest extends ClassStructureHeuristics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassStructureHeuristics classStructureHeuristics0 = new ClassStructureHeuristics();
      String[] stringArray0 = new String[6];
      try { 
        classStructureHeuristics0.configureHeuristic("VFDtRXjjzcdS%U.IP", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heuristics.java.ClassStructureHeuristics", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassStructureHeuristics classStructureHeuristics0 = new ClassStructureHeuristics();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "VFDtRXjjzcdS%U.IP";
      stringArray0[1] = "VFDtRXjjzcdS%U.IP";
      stringArray0[2] = "VFDtRXjjzcdS%U.IP";
      stringArray0[3] = "VFDtRXjjzcdS%U.IP";
      stringArray0[4] = "VFDtRXjjzcdS%U.IP";
      stringArray0[5] = "bean";
      ClassStructureHeuristics classStructureHeuristics1 = classStructureHeuristics0.mapStructureType(stringArray0);
      assertSame(classStructureHeuristics0, classStructureHeuristics1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassStructureHeuristics classStructureHeuristics0 = new ClassStructureHeuristics();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "finalize";
      stringArray0[1] = "types";
      stringArray0[2] = "heuristics.RoleVisitor";
      stringArray0[3] = "finalize";
      stringArray0[4] = "finalize";
      stringArray0[5] = "80";
      stringArray0[6] = "";
      stringArray0[7] = "80";
      ConfigurableHeuristics configurableHeuristics0 = classStructureHeuristics0.configureHeuristic("types", stringArray0);
      assertEquals("class-structure", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassStructureHeuristics classStructureHeuristics0 = new ClassStructureHeuristics();
      ModificationType modificationType0 = ModificationType.ADD;
      Modification modification0 = new Modification("80", "finalize", modificationType0, "80", "80");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      Boolean boolean0 = classStructureHeuristics0.getRole(analysedFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassStructureHeuristics classStructureHeuristics0 = new ClassStructureHeuristics();
      String string0 = classStructureHeuristics0.getName();
      assertEquals("class-structure", string0);
  }
}
