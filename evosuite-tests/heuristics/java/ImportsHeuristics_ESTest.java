/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:09:53 GMT 2018
 */

package heuristics.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heuristics.AnalysedFile;
import heuristics.ConfigurableHeuristics;
import heuristics.java.ImportsHeuristics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.repodriller.domain.Modification;
import org.repodriller.domain.ModificationType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImportsHeuristics_ESTest extends ImportsHeuristics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ImportsHeuristics importsHeuristics0 = new ImportsHeuristics();
      String[] stringArray0 = new String[0];
      try { 
        importsHeuristics0.configureHeuristic("", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heuristics.java.ImportsHeuristics", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ImportsHeuristics importsHeuristics0 = new ImportsHeuristics();
      ConfigurableHeuristics configurableHeuristics0 = importsHeuristics0.configureHeuristic("startsWith", stringArray0);
      assertEquals("imports", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ImportsHeuristics importsHeuristics0 = new ImportsHeuristics();
      ModificationType modificationType0 = ModificationType.MODIFY;
      Modification modification0 = new Modification("UC-<]dJ", "UC-<]dJ", modificationType0, "UC-<]dJ", "UC-<]dJ");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      Boolean boolean0 = importsHeuristics0.getRole(analysedFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ImportsHeuristics importsHeuristics0 = new ImportsHeuristics();
      String string0 = importsHeuristics0.getName();
      assertEquals("imports", string0);
  }
}
