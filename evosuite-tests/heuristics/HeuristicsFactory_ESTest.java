/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:07:12 GMT 2018
 */

package heuristics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heuristics.ConfigurableHeuristics;
import heuristics.HeuristicsFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeuristicsFactory_ESTest extends HeuristicsFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("imports");
      assertEquals("imports", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("typeAnnotation");
      assertEquals("type-annotation", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("classStructure");
      assertEquals("class-structure", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("className");
      assertEquals("class-name", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("filePath");
      assertEquals("path", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("fileName");
      assertEquals("filename", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("package");
      assertEquals("package", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("extends");
      assertEquals("extends", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        HeuristicsFactory.createConfigurable("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heuristics.HeuristicsFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConfigurableHeuristics configurableHeuristics0 = HeuristicsFactory.createConfigurable("annotation");
      assertEquals("annotation", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HeuristicsFactory heuristicsFactory0 = new HeuristicsFactory();
  }
}
