/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:04:27 GMT 2018
 */

package heuristics;

import org.junit.Test;
import static org.junit.Assert.*;
import heuristics.AnalysedFile;
import java.time.ZoneId;
import java.util.Map;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.repodriller.domain.Modification;
import org.repodriller.domain.ModificationType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnalysedFile_ESTest extends AnalysedFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ModificationType modificationType0 = ModificationType.DELETE;
      Modification modification0 = new Modification("\"ogg.lTs/2te<.kAua", "\"ogg.lTs/2te<.kAua", modificationType0, "\"ogg.lTs/2te<.kAua", "\"ogg.lTs/2te<.kAua");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      CompilationUnit compilationUnit0 = analysedFile0.getASTRoot();
      assertNull(compilationUnit0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AnalysedFile analysedFile0 = new AnalysedFile((Modification) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      analysedFile0.setRoles(map0);
      assertEquals(28, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AnalysedFile analysedFile0 = new AnalysedFile((Modification) null);
      Map<String, String> map0 = analysedFile0.getRoles();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ModificationType modificationType0 = ModificationType.ADD;
      Modification modification0 = new Modification("\n\timplements : ", "\n\timplements : ", modificationType0, "\n\timplements : ", "\n\timplements : ");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      String string0 = analysedFile0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("no_tag", "no_tag", modificationType0, "no_tag", "no_tag");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      String string0 = analysedFile0.getFilename();
      assertEquals("no_tag", string0);
  }
}
