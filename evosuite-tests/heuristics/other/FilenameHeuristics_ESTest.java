/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:05:10 GMT 2018
 */

package heuristics.other;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import heuristics.AnalysedFile;
import heuristics.ConfigurableHeuristics;
import heuristics.other.FilenameHeuristics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.repodriller.domain.Modification;
import org.repodriller.domain.ModificationType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilenameHeuristics_ESTest extends FilenameHeuristics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[8];
      try { 
        filenameHeuristics0.configureHeuristic("%/", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("heuristics.other.FilenameHeuristics", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[3];
      ConfigurableHeuristics configurableHeuristics0 = filenameHeuristics0.configureHeuristic("extension", stringArray0);
      assertSame(filenameHeuristics0, configurableHeuristics0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[5];
      ConfigurableHeuristics configurableHeuristics0 = filenameHeuristics0.configureHeuristic("name", stringArray0);
      assertEquals("filename", configurableHeuristics0.getName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[8];
      ConfigurableHeuristics configurableHeuristics0 = filenameHeuristics0.configureHeuristic("regex", stringArray0);
      assertSame(configurableHeuristics0, filenameHeuristics0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      FilenameHeuristics filenameHeuristics1 = filenameHeuristics0.mapRegexps(stringArray0);
      ModificationType modificationType0 = ModificationType.MODIFY;
      Modification modification0 = new Modification("extension", "", modificationType0, "A8b3[0R?Uv", "A8b3[0R?Uv");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      Boolean boolean0 = filenameHeuristics1.getRole(analysedFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#";
      FilenameHeuristics filenameHeuristics1 = filenameHeuristics0.mapRegexps(stringArray0);
      ModificationType modificationType0 = ModificationType.RENAME;
      Modification modification0 = new Modification("-*?Fe", "Q~", modificationType0, "Q~", "k^2yQc|Ea%%\"");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      // Undeclared exception!
      try { 
        filenameHeuristics1.getRole(analysedFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      FilenameHeuristics filenameHeuristics1 = filenameHeuristics0.mapExtensions(stringArray0);
      ModificationType modificationType0 = ModificationType.MODIFY;
      Modification modification0 = new Modification("4>D{", "goIAT`T?t 79\"i|X}", modificationType0, "", "");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      Boolean boolean0 = filenameHeuristics1.getRole(analysedFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      filenameHeuristics0.mapFilenames(stringArray0);
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("te$-HAQ=-WOjk", "", modificationType0, ")X5(`J'7eqE.Rs>", "filename");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      Boolean boolean0 = filenameHeuristics0.getRole(analysedFile0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      ModificationType modificationType0 = ModificationType.MODIFY;
      Modification modification0 = new Modification("extension", "", modificationType0, "A8b3[0R?Uv", "A8b3[0R?Uv");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      Boolean boolean0 = filenameHeuristics0.getRole(analysedFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      FilenameHeuristics filenameHeuristics0 = new FilenameHeuristics();
      String string0 = filenameHeuristics0.getName();
      assertEquals("filename", string0);
  }
}
