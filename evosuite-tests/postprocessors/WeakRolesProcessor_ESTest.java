/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 29 17:01:12 GMT 2018
 */

package postprocessors;

import org.junit.Test;
import static org.junit.Assert.*;
import heuristics.AnalysedFile;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.repodriller.domain.Modification;
import org.repodriller.domain.ModificationType;
import postprocessors.WeakRolesProcessor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeakRolesProcessor_ESTest extends WeakRolesProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      WeakRolesProcessor weakRolesProcessor0 = new WeakRolesProcessor();
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("", "^&", modificationType0, ">", "^&");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("az@5O{:+27m?<", "(L-<+4y2N^B'");
      analysedFile0.setRoles(hashMap0);
      AnalysedFile analysedFile1 = weakRolesProcessor0.postProcess(analysedFile0);
      assertSame(analysedFile1, analysedFile0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WeakRolesProcessor weakRolesProcessor0 = new WeakRolesProcessor();
      ModificationType modificationType0 = ModificationType.COPY;
      Modification modification0 = new Modification("", "", modificationType0, "", "");
      AnalysedFile analysedFile0 = new AnalysedFile(modification0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
      hashMap0.put("", "UjP<?:}YWL6oc<W");
      analysedFile0.setRoles(hashMap0);
      AnalysedFile analysedFile1 = weakRolesProcessor0.postProcess(analysedFile0);
      assertSame(analysedFile0, analysedFile1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WeakRolesProcessor weakRolesProcessor0 = new WeakRolesProcessor();
      AnalysedFile analysedFile0 = new AnalysedFile((Modification) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("i*S;)r+Q~ @xl-pL$R", "");
      analysedFile0.setRoles(hashMap0);
      AnalysedFile analysedFile1 = weakRolesProcessor0.postProcess(analysedFile0);
      assertSame(analysedFile0, analysedFile1);
  }
}
